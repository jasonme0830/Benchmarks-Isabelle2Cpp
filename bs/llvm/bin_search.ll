; Generated by Isabelle/LLVM-shallow
target datalayout = "e-m:e-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"






define i64 @Bin_Search_bin_search_impl({ i64, i64* } %x, i64 %x1) {

  start:
    %a1 = extractvalue { i64, i64* } %x, 0
    %a2 = extractvalue { i64, i64* } %x, 1
    %xca = insertvalue { i64, i64 } zeroinitializer, i64 0, 0
    %xda = insertvalue { i64, i64 } %xca, i64 %a1, 1
    br label %while_start

  while_start:
    %xaa = phi { i64, i64 } [ %x6, %ctd_if ], [ %xda, %start ]
    %a = extractvalue { i64, i64 } %xaa, 0
    %x2 = extractvalue { i64, i64 } %xaa, 1
    %x3 = icmp slt i64 %a, %x2
    br i1 %x3, label %while_body, label %while_end

  while_body:
    %a1a = extractvalue { i64, i64 } %xaa, 0
    %a2a = extractvalue { i64, i64 } %xaa, 1
    %xba = sub i64 %a2a, %a1a
    %xcaa = udiv i64 %xba, 2
    %xdaa = add i64 %a1a, %xcaa
    %a1b = extractvalue { i64, i64* } %x, 0
    %a2b = extractvalue { i64, i64* } %x, 1
    %xea = getelementptr i64, i64* %a2b, i64 %xdaa
    %xfa = load i64, i64* %xea
    %xga = icmp slt i64 %xfa, %x1
    br i1 %xga, label %then, label %else

  then:
    %xha = add i64 %xdaa, 1
    %xia = insertvalue { i64, i64 } zeroinitializer, i64 %xha, 0
    %x4 = insertvalue { i64, i64 } %xia, i64 %a2a, 1
    br label %ctd_if

  else:
    %xha1 = insertvalue { i64, i64 } zeroinitializer, i64 %a1a, 0
    %x5 = insertvalue { i64, i64 } %xha1, i64 %xdaa, 1
    br label %ctd_if

  ctd_if:
    %x6 = phi { i64, i64 } [ %x5, %else ], [ %x4, %then ]
    br label %while_start

  while_end:
    %a1a1 = extractvalue { i64, i64 } %xaa, 0
    %a2a1 = extractvalue { i64, i64 } %xaa, 1
    ret i64 %a1a1
}

define i64 @bin_search({ i64, i64* }* %a, i64 %x) {

  start:
    %a1 = load { i64, i64* }, { i64, i64* }* %a
    %x1 = call i64 @Bin_Search_bin_search_impl ({ i64, i64* } %a1, i64 %x)
    ret i64 %x1
}
